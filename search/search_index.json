{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site contains the project documentation for the calculator project that is a toy module used in the Real Python tutorial Build Your Python Project Documentation With MkDocs . Its aim is to give you a framework to build your project documentation using Python, MkDocs, mkdocstrings, and the Material for MkDocs theme. Table Of Contents The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts: Tutorials How-To Guides Reference Explanation Quickly find what you're looking for depending on your use case by looking at the different pages. Project Overview Acknowledgements I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free of charge.","title":"Calculation Docs"},{"location":"#table-of-contents","text":"The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts: Tutorials How-To Guides Reference Explanation Quickly find what you're looking for depending on your use case by looking at the different pages.","title":"Table Of Contents"},{"location":"#project-overview","text":"","title":"Project Overview"},{"location":"#acknowledgements","text":"I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free of charge.","title":"Acknowledgements"},{"location":"example/","text":"ExampleClass The summary line for a class docstring should fit on one line. If the class has public attributes, they may be documented here in an Attributes section and follow the same formatting as a function's Args section. Alternatively, attributes may be documented inline with the attribute's declaration (see init method below). Properties created with the @property decorator should be documented in the property's getter method. Attributes: Name Type Description attr1 str Description of attr1 . attr2 obj: int , optional): Description of attr2 . Source code in calculator/example.py class ExampleClass ( object ): \"\"\"The summary line for a class docstring should fit on one line. If the class has public attributes, they may be documented here in an ``Attributes`` section and follow the same formatting as a function's ``Args`` section. Alternatively, attributes may be documented inline with the attribute's declaration (see __init__ method below). Properties created with the ``@property`` decorator should be documented in the property's getter method. Attributes: attr1 (str): Description of `attr1`. attr2 (:obj:`int`, optional): Description of `attr2`. \"\"\" def __init__ ( self , param1 , param2 , param3 ): \"\"\"Example of docstring on the __init__ method. The __init__ method may be documented in either the class level docstring, or as a docstring on the __init__ method itself. Either form is acceptable, but the two should not be mixed. Choose one convention to document the __init__ method and be consistent with it. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1 (str): Description of `param1`. param2 (:obj:`int`, optional): Description of `param2`. Multiple lines are supported. param3 (:obj:`list` of :obj:`str`): Description of `param3`. \"\"\" self . attr1 = param1 self . attr2 = param2 self . attr3 = param3 #: Doc comment *inline* with attribute #: list of str: Doc comment *before* attribute, with type specified self . attr4 = [ 'attr4' ] self . attr5 = None \"\"\"str: Docstring *after* attribute, with type specified.\"\"\" @property def readonly_property ( self ): \"\"\"str: Properties should be documented in their getter method.\"\"\" return 'readonly_property' @property def readwrite_property ( self ): \"\"\":obj:`list` of :obj:`str`: Properties with both a getter and setter should only be documented in their getter method. If the setter method contains notable behavior, it should be mentioned here. \"\"\" return [ 'readwrite_property' ] @readwrite_property . setter def readwrite_property ( self , value ): value def example_method ( self , param1 , param2 ): \"\"\"Class methods are similar to regular functions. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1: The first parameter. param2: The second parameter. Returns: True if successful, False otherwise. \"\"\" return True def __special__ ( self ): \"\"\"By default special members with docstrings are not included. Special members are any methods or attributes that start with and end with a double underscore. Any special member with a docstring will be included in the output, if ``napoleon_include_special_with_doc`` is set to True. This behavior can be enabled by changing the following setting in Sphinx's conf.py:: napoleon_include_special_with_doc = True \"\"\" pass def __special_without_docstring__ ( self ): pass def _private ( self ): \"\"\"By default private members are not included. Private members are any methods or attributes that start with an underscore and are *not* special. By default they are not included in the output. This behavior can be changed such that private members *are* included by changing the following setting in Sphinx's conf.py:: napoleon_include_private_with_doc = True \"\"\" pass def _private_without_docstring ( self ): pass readonly_property property readonly str: Properties should be documented in their getter method. readwrite_property property writable :obj: list of :obj: str : Properties with both a getter and setter should only be documented in their getter method. If the setter method contains notable behavior, it should be mentioned here. __init__ ( self , param1 , param2 , param3 ) special Example of docstring on the init method. The init method may be documented in either the class level docstring, or as a docstring on the init method itself. Either form is acceptable, but the two should not be mixed. Choose one convention to document the init method and be consistent with it. !!! note Do not include the self parameter in the Args section. Parameters: Name Type Description Default param1 str Description of param1 . required param2 obj: int , optional): Description of param2 . Multiple lines are supported. required param3 obj: list of :obj: str ): Description of param3 . required Source code in calculator/example.py def __init__ ( self , param1 , param2 , param3 ): \"\"\"Example of docstring on the __init__ method. The __init__ method may be documented in either the class level docstring, or as a docstring on the __init__ method itself. Either form is acceptable, but the two should not be mixed. Choose one convention to document the __init__ method and be consistent with it. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1 (str): Description of `param1`. param2 (:obj:`int`, optional): Description of `param2`. Multiple lines are supported. param3 (:obj:`list` of :obj:`str`): Description of `param3`. \"\"\" self . attr1 = param1 self . attr2 = param2 self . attr3 = param3 #: Doc comment *inline* with attribute #: list of str: Doc comment *before* attribute, with type specified self . attr4 = [ 'attr4' ] self . attr5 = None \"\"\"str: Docstring *after* attribute, with type specified.\"\"\" __special__ ( self ) special By default special members with docstrings are not included. Special members are any methods or attributes that start with and end with a double underscore. Any special member with a docstring will be included in the output, if napoleon_include_special_with_doc is set to True. This behavior can be enabled by changing the following setting in Sphinx's conf.py:: napoleon_include_special_with_doc = True Source code in calculator/example.py def __special__ ( self ): \"\"\"By default special members with docstrings are not included. Special members are any methods or attributes that start with and end with a double underscore. Any special member with a docstring will be included in the output, if ``napoleon_include_special_with_doc`` is set to True. This behavior can be enabled by changing the following setting in Sphinx's conf.py:: napoleon_include_special_with_doc = True \"\"\" pass example_method ( self , param1 , param2 ) Class methods are similar to regular functions. !!! note Do not include the self parameter in the Args section. Parameters: Name Type Description Default param1 The first parameter. required param2 The second parameter. required Returns: Type Description True if successful, False otherwise. Source code in calculator/example.py def example_method ( self , param1 , param2 ): \"\"\"Class methods are similar to regular functions. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1: The first parameter. param2: The second parameter. Returns: True if successful, False otherwise. \"\"\" return True","title":"example"},{"location":"example/#calculator.example.ExampleClass","text":"The summary line for a class docstring should fit on one line. If the class has public attributes, they may be documented here in an Attributes section and follow the same formatting as a function's Args section. Alternatively, attributes may be documented inline with the attribute's declaration (see init method below). Properties created with the @property decorator should be documented in the property's getter method. Attributes: Name Type Description attr1 str Description of attr1 . attr2 obj: int , optional): Description of attr2 . Source code in calculator/example.py class ExampleClass ( object ): \"\"\"The summary line for a class docstring should fit on one line. If the class has public attributes, they may be documented here in an ``Attributes`` section and follow the same formatting as a function's ``Args`` section. Alternatively, attributes may be documented inline with the attribute's declaration (see __init__ method below). Properties created with the ``@property`` decorator should be documented in the property's getter method. Attributes: attr1 (str): Description of `attr1`. attr2 (:obj:`int`, optional): Description of `attr2`. \"\"\" def __init__ ( self , param1 , param2 , param3 ): \"\"\"Example of docstring on the __init__ method. The __init__ method may be documented in either the class level docstring, or as a docstring on the __init__ method itself. Either form is acceptable, but the two should not be mixed. Choose one convention to document the __init__ method and be consistent with it. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1 (str): Description of `param1`. param2 (:obj:`int`, optional): Description of `param2`. Multiple lines are supported. param3 (:obj:`list` of :obj:`str`): Description of `param3`. \"\"\" self . attr1 = param1 self . attr2 = param2 self . attr3 = param3 #: Doc comment *inline* with attribute #: list of str: Doc comment *before* attribute, with type specified self . attr4 = [ 'attr4' ] self . attr5 = None \"\"\"str: Docstring *after* attribute, with type specified.\"\"\" @property def readonly_property ( self ): \"\"\"str: Properties should be documented in their getter method.\"\"\" return 'readonly_property' @property def readwrite_property ( self ): \"\"\":obj:`list` of :obj:`str`: Properties with both a getter and setter should only be documented in their getter method. If the setter method contains notable behavior, it should be mentioned here. \"\"\" return [ 'readwrite_property' ] @readwrite_property . setter def readwrite_property ( self , value ): value def example_method ( self , param1 , param2 ): \"\"\"Class methods are similar to regular functions. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1: The first parameter. param2: The second parameter. Returns: True if successful, False otherwise. \"\"\" return True def __special__ ( self ): \"\"\"By default special members with docstrings are not included. Special members are any methods or attributes that start with and end with a double underscore. Any special member with a docstring will be included in the output, if ``napoleon_include_special_with_doc`` is set to True. This behavior can be enabled by changing the following setting in Sphinx's conf.py:: napoleon_include_special_with_doc = True \"\"\" pass def __special_without_docstring__ ( self ): pass def _private ( self ): \"\"\"By default private members are not included. Private members are any methods or attributes that start with an underscore and are *not* special. By default they are not included in the output. This behavior can be changed such that private members *are* included by changing the following setting in Sphinx's conf.py:: napoleon_include_private_with_doc = True \"\"\" pass def _private_without_docstring ( self ): pass","title":"ExampleClass"},{"location":"example/#calculator.example.ExampleClass.readonly_property","text":"str: Properties should be documented in their getter method.","title":"readonly_property"},{"location":"example/#calculator.example.ExampleClass.readwrite_property","text":":obj: list of :obj: str : Properties with both a getter and setter should only be documented in their getter method. If the setter method contains notable behavior, it should be mentioned here.","title":"readwrite_property"},{"location":"example/#calculator.example.ExampleClass.__init__","text":"Example of docstring on the init method. The init method may be documented in either the class level docstring, or as a docstring on the init method itself. Either form is acceptable, but the two should not be mixed. Choose one convention to document the init method and be consistent with it. !!! note Do not include the self parameter in the Args section. Parameters: Name Type Description Default param1 str Description of param1 . required param2 obj: int , optional): Description of param2 . Multiple lines are supported. required param3 obj: list of :obj: str ): Description of param3 . required Source code in calculator/example.py def __init__ ( self , param1 , param2 , param3 ): \"\"\"Example of docstring on the __init__ method. The __init__ method may be documented in either the class level docstring, or as a docstring on the __init__ method itself. Either form is acceptable, but the two should not be mixed. Choose one convention to document the __init__ method and be consistent with it. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1 (str): Description of `param1`. param2 (:obj:`int`, optional): Description of `param2`. Multiple lines are supported. param3 (:obj:`list` of :obj:`str`): Description of `param3`. \"\"\" self . attr1 = param1 self . attr2 = param2 self . attr3 = param3 #: Doc comment *inline* with attribute #: list of str: Doc comment *before* attribute, with type specified self . attr4 = [ 'attr4' ] self . attr5 = None \"\"\"str: Docstring *after* attribute, with type specified.\"\"\"","title":"__init__()"},{"location":"example/#calculator.example.ExampleClass.__special__","text":"By default special members with docstrings are not included. Special members are any methods or attributes that start with and end with a double underscore. Any special member with a docstring will be included in the output, if napoleon_include_special_with_doc is set to True. This behavior can be enabled by changing the following setting in Sphinx's conf.py:: napoleon_include_special_with_doc = True Source code in calculator/example.py def __special__ ( self ): \"\"\"By default special members with docstrings are not included. Special members are any methods or attributes that start with and end with a double underscore. Any special member with a docstring will be included in the output, if ``napoleon_include_special_with_doc`` is set to True. This behavior can be enabled by changing the following setting in Sphinx's conf.py:: napoleon_include_special_with_doc = True \"\"\" pass","title":"__special__()"},{"location":"example/#calculator.example.ExampleClass.example_method","text":"Class methods are similar to regular functions. !!! note Do not include the self parameter in the Args section. Parameters: Name Type Description Default param1 The first parameter. required param2 The second parameter. required Returns: Type Description True if successful, False otherwise. Source code in calculator/example.py def example_method ( self , param1 , param2 ): \"\"\"Class methods are similar to regular functions. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1: The first parameter. param2: The second parameter. Returns: True if successful, False otherwise. \"\"\" return True","title":"example_method()"},{"location":"explaination/","text":"This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented. Note: Expand this section by considering the following points: Give context and background on your library Explain why you created it Provide multiple examples and approaches of how to work with it Help the reader make connections Avoid writing instructions or technical descriptions here","title":"Explaination"},{"location":"how-to-guides/","text":"This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project. How To Add Two Numbers? You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers, and you'll always get a float as a result.","title":"How-To Guides"},{"location":"how-to-guides/#how-to-add-two-numbers","text":"You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers, and you'll always get a float as a result.","title":"How To Add Two Numbers?"},{"location":"reference/","text":"This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the calculator project code. Provide several sample math calculations. This module allows the user to make mathematical calculations. Examples: >>> from calculator import calculations >>> calculations . add ( 2 , 4 ) 6.0 >>> calculations . multiply ( 2.0 , 4.0 ) 8.0 >>> from calculator.calculations import divide >>> divide ( 4.0 , 2 ) 2.0 The module contains the following functions: add(a, b) - Returns the sum of two numbers. subtract(a, b) - Returns the difference of two numbers. multiply(a, b) - Returns the product of two numbers. divide(a, b) - Returns the quotient of two numbers. add ( a , b ) Compute and return the sum of two numbers. Examples: >>> add ( 4.0 , 2.0 ) 6.0 >>> add ( 4 , 2 ) 6.0 Parameters: Name Type Description Default a float A number representing the first addend in the addition. required b float A number representing the second addend in the addition. required Returns: Type Description float A number representing the artihmetic sum of a and b . Source code in calculator/calculations.py def add ( a , b ): \"\"\"Compute and return the sum of two numbers. Examples: >>> add(4.0, 2.0) 6.0 >>> add(4, 2) 6.0 Args: a (float): A number representing the first addend in the addition. b (float): A number representing the second addend in the addition. Returns: float: A number representing the artihmetic sum of `a` and `b`. \"\"\" return float ( a + b ) divide ( a , b ) Compute and return the quotient of two numbers. Parameters: Name Type Description Default a float A number representing the dividend in the division. required b float A number representing the divisor in the division. required Returns: Type Description float A number representing the quotient of a and b . Exceptions: Type Description ZeroDivisionError An error occurs when the divisor is 0 . Source code in calculator/calculations.py def divide ( a , b ): \"\"\"Compute and return the quotient of two numbers. Args: a (float): A number representing the dividend in the division. b (float): A number representing the divisor in the division. Returns: float: A number representing the quotient of `a` and `b`. Raises: ZeroDivisionError: An error occurs when the divisor is `0`. \"\"\" if b == 0 : raise ZeroDivisionError ( \"division by zero\" ) return float ( a / b ) multiply ( a , b ) Compute and return the product of two numbers. Parameters: Name Type Description Default a float A number representing the multiplicand in the multiplication. required b float A number representing the multiplier in the multiplication. required Returns: Type Description float A number representing the product of a and b . Source code in calculator/calculations.py def multiply ( a , b ): \"\"\"Compute and return the product of two numbers. Args: a (float): A number representing the multiplicand in the multiplication. b (float): A number representing the multiplier in the multiplication. Returns: float: A number representing the product of `a` and `b`. \"\"\" return float ( a * b ) subtract ( a , b ) Calculate the difference of two numbers. Parameters: Name Type Description Default a float A number representing the minuend in the subtraction. required b float A number representing the subtrahend in the subtraction. required Returns: Type Description float A number representing the difference between a and b . Source code in calculator/calculations.py def subtract ( a , b ): \"\"\"Calculate the difference of two numbers. Args: a (float): A number representing the minuend in the subtraction. b (float): A number representing the subtrahend in the subtraction. Returns: float: A number representing the difference between `a` and `b`. \"\"\" return float ( a - b )","title":"api"},{"location":"reference/#calculator.calculations.add","text":"Compute and return the sum of two numbers. Examples: >>> add ( 4.0 , 2.0 ) 6.0 >>> add ( 4 , 2 ) 6.0 Parameters: Name Type Description Default a float A number representing the first addend in the addition. required b float A number representing the second addend in the addition. required Returns: Type Description float A number representing the artihmetic sum of a and b . Source code in calculator/calculations.py def add ( a , b ): \"\"\"Compute and return the sum of two numbers. Examples: >>> add(4.0, 2.0) 6.0 >>> add(4, 2) 6.0 Args: a (float): A number representing the first addend in the addition. b (float): A number representing the second addend in the addition. Returns: float: A number representing the artihmetic sum of `a` and `b`. \"\"\" return float ( a + b )","title":"add()"},{"location":"reference/#calculator.calculations.divide","text":"Compute and return the quotient of two numbers. Parameters: Name Type Description Default a float A number representing the dividend in the division. required b float A number representing the divisor in the division. required Returns: Type Description float A number representing the quotient of a and b . Exceptions: Type Description ZeroDivisionError An error occurs when the divisor is 0 . Source code in calculator/calculations.py def divide ( a , b ): \"\"\"Compute and return the quotient of two numbers. Args: a (float): A number representing the dividend in the division. b (float): A number representing the divisor in the division. Returns: float: A number representing the quotient of `a` and `b`. Raises: ZeroDivisionError: An error occurs when the divisor is `0`. \"\"\" if b == 0 : raise ZeroDivisionError ( \"division by zero\" ) return float ( a / b )","title":"divide()"},{"location":"reference/#calculator.calculations.multiply","text":"Compute and return the product of two numbers. Parameters: Name Type Description Default a float A number representing the multiplicand in the multiplication. required b float A number representing the multiplier in the multiplication. required Returns: Type Description float A number representing the product of a and b . Source code in calculator/calculations.py def multiply ( a , b ): \"\"\"Compute and return the product of two numbers. Args: a (float): A number representing the multiplicand in the multiplication. b (float): A number representing the multiplier in the multiplication. Returns: float: A number representing the product of `a` and `b`. \"\"\" return float ( a * b )","title":"multiply()"},{"location":"reference/#calculator.calculations.subtract","text":"Calculate the difference of two numbers. Parameters: Name Type Description Default a float A number representing the minuend in the subtraction. required b float A number representing the subtrahend in the subtraction. required Returns: Type Description float A number representing the difference between a and b . Source code in calculator/calculations.py def subtract ( a , b ): \"\"\"Calculate the difference of two numbers. Args: a (float): A number representing the minuend in the subtraction. b (float): A number representing the subtrahend in the subtraction. Returns: float: A number representing the difference between `a` and `b`. \"\"\" return float ( a - b )","title":"subtract()"},{"location":"tutorials/","text":"This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project. Note: Expand this section by considering the following points: Help newcomers with getting started Teach readers about your library by making them write code Inspire confidence through examples that work for everyone, repeatably Give readers an immediate sense of achievement Show concrete examples, no abstractions Provide the minimum necessary explanation Avoid any distractions","title":"Tutorials"}]}